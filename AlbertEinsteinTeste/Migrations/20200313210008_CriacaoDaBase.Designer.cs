// <auto-generated />
using System;
using AlbertEinsteinTeste.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlbertEinsteinTeste.Migrations
{
    [DbContext(typeof(AlbertEinsteinTesteContext))]
    [Migration("20200313210008_CriacaoDaBase")]
    partial class CriacaoDaBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AlbertEinsteinTeste.Models.Consulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultaSituacaoId");

                    b.Property<DateTime>("DataConsulta");

                    b.Property<string>("Diagnostico");

                    b.Property<int>("MedicoId");

                    b.Property<int>("PacienteId");

                    b.Property<string>("Sintoma")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ConsultaSituacaoId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Consulta");
                });

            modelBuilder.Entity("AlbertEinsteinTeste.Models.ConsultaSituacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DescricaoSituacao");

                    b.HasKey("Id");

                    b.ToTable("ConsultaSituacao");
                });

            modelBuilder.Entity("AlbertEinsteinTeste.Models.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cidade");

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("Especialidade");

                    b.Property<string>("Estado");

                    b.Property<bool>("Ferias");

                    b.Property<string>("Nome");

                    b.Property<double>("Salario");

                    b.Property<string>("Sexo");

                    b.HasKey("Id");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("AlbertEinsteinTeste.Models.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cidade");

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("Estado");

                    b.Property<string>("Nome");

                    b.Property<string>("Sexo");

                    b.HasKey("Id");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("AlbertEinsteinTeste.Models.Consulta", b =>
                {
                    b.HasOne("AlbertEinsteinTeste.Models.ConsultaSituacao", "ConsultaSituacao")
                        .WithMany()
                        .HasForeignKey("ConsultaSituacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AlbertEinsteinTeste.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AlbertEinsteinTeste.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
